============================================
Number literals
============================================

function Run() {
  a = 123;
  b = 0.123;
  c = 1.1e1;
  d = 2e+2;
  e = 3e-3;
  f = 4E4;
  g = 5E+5;
  h = 6E-6;
  i = 7E;
  j = 8E-;
  k = 9e+;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))
     (assignment_statement (identifier) (number_literal))))

============================================
Common constants
============================================

function Run() {
  a = true;
  b = false;
  c = null;
}//$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (true))
    (assignment_statement (identifier) (false))
    (assignment_statement (identifier) (null))))

============================================
Function calls
============================================

function Run() {
  CreateSparseArray(1, a);
  @f();
  a.@b();
  @a.b();
}
//$end

---

(program
  (mss_function (identifier) (parameter_list)
    (call_statement (call_expression
      (identifier)
      (argument_list (number_literal) (identifier))))
    (call_statement (call_expression
      (indirection_expression) (argument_list)))
    (call_statement (call_expression
      (indirection_field_expression (identifier) (indirection_expression))
      (argument_list)))
    (call_statement (call_expression
      (field_expression (indirection_expression) (identifier))
      (argument_list)))))

============================================
Invalid function calls
============================================

function Run() {
  foo()();
  foo[1]();
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (call_statement
      (call_expression
        (identifier)
        (argument_list))
      (ERROR))
    (ERROR
      (subscript_expression
        (identifier)
        (number_literal)))
    (empty_statement)))

============================================
String literals
============================================

function Run() {
  a = 'ab';
  a = '\'hi\'';
  a = 'Alice\'s';
  a = 'http://example.com/';
  a = 'Füße';
  a = 'foo bar baz';
  a = '';
  a = '\0\1';
  a = '""';
  a = 'x""x';
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))
    (assignment_statement (identifier) (string_literal))))

============================================
Character literals
============================================

function Run() {
  a = 'a';
  a = 'ö';
  a = '\0';
  a = '\t';
  a = '\'';
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (char_literal))
    (assignment_statement (identifier) (char_literal))
    (assignment_statement (identifier) (char_literal))
    (assignment_statement (identifier) (char_literal))
    (assignment_statement (identifier) (char_literal))))

============================================
Field access
============================================

function Run() {
  a = s.data1;
  a = b.@c;
  a = @b.c;
  a = q[data3];
  a = @b._property:c;
  a = b[0]._property:c;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (field_expression (identifier) (identifier)))
    (assignment_statement (identifier) (indirection_field_expression (identifier) (indirection_expression)))
    (assignment_statement (identifier) (field_expression (indirection_expression) (identifier)))
    (assignment_statement (identifier) (subscript_expression (identifier) (identifier)))
    (assignment_statement (identifier) (user_property_expression (indirection_expression) (identifier)))
    (assignment_statement (identifier) (user_property_expression
      (subscript_expression (identifier) (number_literal))
      (identifier)))))

============================================
Field access with call expressions
============================================

function Run() {
  a = f().foo;
  a = f().foo();
  a = b.f().foo();
  a = f()[0];
  a = x.f(2, a.b().c, 'foo');
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (field_expression
      (call_expression (identifier) (argument_list))
      (identifier)))
    (assignment_statement (identifier) (call_expression
      (field_expression
        (call_expression (identifier) (argument_list))
        (identifier))
      (argument_list)))
    (assignment_statement (identifier) (call_expression
      (field_expression
        (call_expression (field_expression (identifier) (identifier)) (argument_list))
        (identifier))
      (argument_list)))
    (assignment_statement (identifier) (subscript_expression
      (call_expression (identifier) (argument_list))
      (number_literal)))
    (assignment_statement (identifier) (call_expression
      (field_expression (identifier) (identifier))
      (argument_list
        (number_literal)
        (field_expression
          (call_expression
            (field_expression (identifier) (identifier))
            (argument_list))
          (identifier))
        (string_literal))))))

============================================
Boolean operators
============================================

function Run() {
  a = i or j;
  a = i and j;
  a = not b;
  a = not a and not b or not c and not d;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (unary_expression (identifier)))
    (assignment_statement (identifier) (binary_expression
      (binary_expression
        (binary_expression (unary_expression (identifier)) (unary_expression (identifier)))
        (unary_expression (identifier)))
      (unary_expression (identifier))))))


============================================
Math operators
============================================

function Run() {
  Trace(1 + 2 = 3);
  Trace(3 = 1 + 2);
  a = -a / b + c * -d;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (call_statement (call_expression
      (identifier) (argument_list (binary_expression
          (binary_expression (number_literal) (number_literal))
          (number_literal)))))
    (call_statement (call_expression
      (identifier) (argument_list (binary_expression
          (binary_expression (number_literal) (number_literal))
          (number_literal)))))
    (assignment_statement (identifier) (binary_expression
      (binary_expression
          (binary_expression
              (unary_expression (identifier)) (identifier))
          (identifier))
      (unary_expression (identifier))))))


============================================
Binary operators
============================================

function Run() {
  a = a + b;
  a = a - b;
  a = a * b;
  a = a / b;
  a = a % b;
  a = a = b;
  a = a < b;
  a = a > b;
  a = a <= b;
  a = a >= b;
  a = a != b;
  a = a & b;
  a = a and b;
  a = a or b;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))
    (assignment_statement (identifier) (binary_expression (identifier) (identifier)))))


============================================
String concatenation
============================================

function Run() {
  a = 'ab' + c;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (identifier) (binary_expression (string_literal) (identifier)))))


============================================
Indirection
============================================

function Run() {
  @a = 1;
  b = @a;
} //$end

---

(program
  (mss_function (identifier) (parameter_list)
    (assignment_statement (indirection_expression) (number_literal))
    (assignment_statement (identifier) (indirection_expression))))
